package hotel.gen.cxf;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * The MeetingBroker 3.0 Web Service
 *
 * This class was generated by Apache CXF 3.1.11
 * 2017-05-16T13:10:10.019+08:00
 * Generated source version: 3.1.11
 * 
 */
@WebServiceClient(name = "Handler", 
                  wsdlLocation = "https://release.meetingbroker.com/meetingbrokerservices/handler.asmx?wsdl",
                  targetNamespace = "http://localhost/MeetingBrokerServices") 
public class Handler extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://localhost/MeetingBrokerServices", "Handler");
    public final static QName HandlerSoap12 = new QName("http://localhost/MeetingBrokerServices", "HandlerSoap12");
    public final static QName HandlerSoap = new QName("http://localhost/MeetingBrokerServices", "HandlerSoap");
    static {
        URL url = null;
        try {
            url = new URL("https://release.meetingbroker.com/meetingbrokerservices/handler.asmx?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(Handler.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "https://release.meetingbroker.com/meetingbrokerservices/handler.asmx?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public Handler(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Handler(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Handler() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public Handler(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public Handler(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public Handler(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns HandlerSoap
     */
    @WebEndpoint(name = "HandlerSoap12")
    public HandlerSoap getHandlerSoap12() {
        return super.getPort(HandlerSoap12, HandlerSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns HandlerSoap
     */
    @WebEndpoint(name = "HandlerSoap12")
    public HandlerSoap getHandlerSoap12(WebServiceFeature... features) {
        return super.getPort(HandlerSoap12, HandlerSoap.class, features);
    }


    /**
     *
     * @return
     *     returns HandlerSoap
     */
    @WebEndpoint(name = "HandlerSoap")
    public HandlerSoap getHandlerSoap() {
        return super.getPort(HandlerSoap, HandlerSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns HandlerSoap
     */
    @WebEndpoint(name = "HandlerSoap")
    public HandlerSoap getHandlerSoap(WebServiceFeature... features) {
        return super.getPort(HandlerSoap, HandlerSoap.class, features);
    }

}
